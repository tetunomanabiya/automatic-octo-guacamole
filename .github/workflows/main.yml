name: 🛠 CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20.x, 18.x]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      # 1) コードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Node.js をセットアップ（キャッシュ有効：lockfile があれば動作）
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      # 3) 依存関係のインストール
      - name: Install dependencies
        shell: bash
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            echo "Lockfile found → npm ci"
            npm ci
          elif [ -f yarn.lock ]; then
            echo "Yarn lockfile found → yarn install"
            yarn install --frozen-lockfile
          else
            echo "No lockfile → npm install"
            npm install
          fi

      # 4) Lint
      - name: Run lint
        run: npm run lint

      # 5) tsconfig.json があれば型チェック
      - name: Check for tsconfig.json
        id: ts-check
        shell: bash
        run: |
          if [ -f tsconfig.json ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Type‐check
        if: steps.ts-check.outputs.exists == 'true'
        run: npm run type-check

      # 6) ビルド
      - name: Build
        run: npm run build

      # 7) テスト
      - name: Run tests
        run: npm test

      # 8) coverage フォルダをアーティファクト化（空でも WARN でスキップ）
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-node${{ matrix.node-version }}
          path: coverage/
          if-no-files-found: warn
